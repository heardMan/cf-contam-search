{"version":3,"sources":["views/ContaminantSearch.js","App.js","serviceWorker.js","index.js"],"names":["ContaminantSearch","props","useState","query","setQuery","results","setResults","tableData","setTableData","filterResults","searchTerm","console","log","searchResults","i","length","result","Contaminant","toUpperCase","indexOf","Model","Category","push","useEffect","fetch","then","response","body","getReader","read","fileData","rawData","value","rows","TextDecoder","decode","split","currentRow","newRecord","field","category","id","type","onChange","e","preventDefault","target","map","datum","key","Challenge","Filtered","Removal","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8NAgJeA,EA5IW,SAACC,GAAW,IAAD,EAEPC,mBAAS,IAFF,mBAE1BC,EAF0B,KAEnBC,EAFmB,OAGHF,mBAAS,IAHN,mBAG1BG,EAH0B,KAGjBC,EAHiB,OAICJ,mBAAS,IAJV,mBAI1BK,EAJ0B,KAIfC,EAJe,KAuE3BC,EAAgB,SAACC,GACnBC,QAAQC,IAAIF,GAEZ,IADA,IAAMG,EAAgB,GACbC,EAAI,EAAGA,EAAIT,EAAQU,OAAQD,IAAK,CACrC,IAAIE,EAASX,EAAQS,GACrBH,QAAQC,IAAII,IAGRA,EAAOC,YAAYC,cAAcC,QAAQT,EAAWQ,gBAAiB,GACrEF,EAAOI,MAAMF,cAAcC,QAAQT,EAAWQ,gBAAiB,GAC/DF,EAAOK,SAASH,cAAcC,QAAQT,EAAWQ,gBAAiB,IAElEL,EAAcS,KAAKN,GAI3BL,QAAQC,IAAIC,GACZL,EAAaK,IAWjB,OANAU,qBAAU,WAtFNC,MAAM,2BACDC,MAAK,SAACC,GAEUA,EAASC,KAAKC,YAIpBC,OAAOJ,MAAK,SAACK,GAWhB,IARA,IAAMC,EAAUD,EAASE,MAIrBC,GAFc,IAAIC,aAECC,OAAOJ,GAASK,MAAM,MAEzC/B,EAAU,GATe,WAWpBS,GACL,IAAIuB,EAAaJ,EAAKnB,GAAGsB,MAAM,KAU3BE,EAAY,CACZ,YAAeD,EAAW,GAC1B,UAAaA,EAAW,GACxB,SAAYA,EAAW,GACvB,QAAWA,EAAW,GACtB,MAASA,EAAW,GACpB,SAda,WACb,IAAIE,EAAQF,EAAW,GAIvB,OAHIA,EAAW,KACXE,GAASF,EAAW,GAAKA,EAAW,IAEjCE,EASKC,IAGhBnC,EAAQiB,KAAKgB,IApBRxB,EAAI,EAAGA,EAAImB,EAAKlB,OAAQD,IAAM,EAA9BA,GAyBTR,EAAWD,GACXG,EAAaH,WA8C1B,IAGC,6BACI,yBAAKoC,GAAG,UACJ,0CACA,2BAAOC,KAAK,OAAOV,MAAO7B,EAAOwC,SAzCzB,SAAAC,GAChBA,EAAEC,iBACFzC,EAASwC,EAAEE,OAAOd,OAElBvB,EAAcmC,EAAEE,OAAOd,WAuCnB,yBAAKS,GAAG,gBACJ,+BACI,+BACI,4BACI,2CACA,+CACA,8CACA,4CACA,sCACA,0CAGR,+BACKlC,EAAUwC,KAAI,SAACC,EAAOlC,GAEnB,OACI,wBAAImC,IAAKnC,GACL,4BAAKkC,EAAM/B,aACX,4BAAK+B,EAAME,WACX,4BAAKF,EAAMG,UACX,4BAAKH,EAAMI,SACX,4BAAKJ,EAAM5B,OACX,4BAAK4B,EAAM3B,mB,MC9GhCgC,MAhBf,WACE,OACE,yBAAKC,UAAU,OACb,gCACE,mDAEF,8BACE,kBAAC,EAAD,OAEF,gCACE,iECHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.8f368af1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n\n\nconst ContaminantSearch = (props) => {\n\n    const [query, setQuery] = useState('');\n    const [results, setResults] = useState([]);\n    const [tableData, setTableData] = useState([]);\n\n    const getResults = () => {\n        fetch('./data/Test-Results.csv')\n            .then((response) => {\n\n                let reader = response.body.getReader();\n\n                // read() returns a promise that resolves\n                // when a value has been received\n                reader.read().then((fileData) => {\n\n                    // value for fetch streams is a Uint8Array\n                    const rawData = fileData.value;\n\n                    let utf8decoder = new TextDecoder();\n\n                    let rows = utf8decoder.decode(rawData).split('\\n');\n\n                    let results = []\n\n                    for (let i = 1; i < rows.length; i++) {\n                        let currentRow = rows[i].split(',');\n\n                        const category = () => {\n                            let field = currentRow[5];\n                            if (currentRow[6]) {\n                                field += currentRow[6] + currentRow[7];\n                            }\n                            return field;\n                        }\n\n                        let newRecord = {\n                            'Contaminant': currentRow[0],\n                            'Challenge': currentRow[1],\n                            'Filtered': currentRow[2],\n                            'Removal': currentRow[3],\n                            'Model': currentRow[4],\n                            'Category': category()\n                        };\n\n                        results.push(newRecord);\n\n                    }\n\n                    // Read some more, and call this function again\n                    setResults(results)\n                    setTableData(results)\n                    return\n\n                });\n\n\n            });\n\n\n    }\n\n    const changeQuery = e => {\n        e.preventDefault();\n        setQuery(e.target.value);\n\n        filterResults(e.target.value);\n\n    }\n\n\n    const filterResults = (searchTerm) => {\n        console.log(searchTerm);\n        const searchResults = [];\n        for (let i = 0; i < results.length; i++) {\n            let result = results[i];\n            console.log(result);\n\n            if (\n                result.Contaminant.toUpperCase().indexOf(searchTerm.toUpperCase())> -1 ||\n                result.Model.toUpperCase().indexOf(searchTerm.toUpperCase())> -1 ||\n                result.Category.toUpperCase().indexOf(searchTerm.toUpperCase())> -1\n            ) {\n                searchResults.push(result);\n            }\n\n        }\n        console.log(searchResults);\n        setTableData(searchResults);\n\n    }\n\n\n    useEffect(() => {\n        getResults()\n\n\n    }, []);\n\n    return (\n        <div>\n            <div id=\"search\">\n                <label>Search:</label>\n                <input type='text' value={query} onChange={changeQuery} />\n            </div>\n            <div id=\"resultsTable\">\n                <table>\n                    <thead>\n                        <tr>\n                            <td>Contaminant</td>\n                            <td>Challenge Water</td>\n                            <td>Filtered Water</td>\n                            <td>Removal Rate</td>\n                            <td>Filter</td>\n                            <td>Category</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {tableData.map((datum, i) => {\n\n                            return (\n                                <tr key={i}>\n                                    <td>{datum.Contaminant}</td>\n                                    <td>{datum.Challenge}</td>\n                                    <td>{datum.Filtered}</td>\n                                    <td>{datum.Removal}</td>\n                                    <td>{datum.Model}</td>\n                                    <td>{datum.Category}</td>\n\n                                </tr>\n                            );\n\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\nexport default ContaminantSearch;","import React from 'react';\nimport ContaminantSearch from './views/ContaminantSearch'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Contaminant Search</h1>\n      </header>\n      <main>\n        <ContaminantSearch />\n      </main>\n      <footer>\n        <h6>markheard.io software solution</h6>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}